
" CHF's vimrc

" Essential QOL ----- {{{
set number
set rnu
set nocompatible
set showcmd
filetype plugin indent on
syntax enable
set termguicolors
color solarized8
set hlsearch
nohlsearch
set incsearch
if has('gui_running')
    set cursorline
endif
set ignorecase
set smartcase
set noswapfile
set belloff=all
set hidden
set autoread
set autowrite
let mapleader=" "
setglobal foldmethod=marker
set foldminlines=3
nnoremap S <nop>
set foldlevelstart=20
set textwidth=99
setglobal formatoptions=cqajlr

if (&termencoding ==# 'utf-8' || &encoding ==# 'utf-8') && v:version >= 700
    let &g:listchars = "tab:\u25c0 \u25b6,trail:\u2423,extends:\u21c9,precedes:\u21c7,nbsp:\u00b7"
    let &g:fillchars = "vert:\u250b,fold:\u00b7"
    let s:modstr = "\u25c6"
    let s:umodstr = "\u25c7"
else
    setglobal listchars=tab:>\ ,trail:-,extends:>,precedes:<
    let s:modstr = "[+]"
    let s:umodstr = "[-]"
endif

if has('gui_running')
    set guioptions-=T
    set guioptions-=m
    set guioptions-=r
    set guioptions-=L
    set guicursor+=a:blinkon0
    set guifont=Menlo-Regular:h16
    let g:solarized_statusline="flat"
    colorscheme solarized8
    set background=dark
else
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"
endif

" Persistent undo
if has('nvim')
    if !isdirectory("/tmp/nvim")
        call mkdir("/tmp/nvim", "", 0700)
    endif
    set undodir=/tmp/nvim
else
    if !isdirectory("/tmp/vim")
        call mkdir("/tmp/vim", "", 0700)
    endif
    set undodir=/tmp/vim
endif
set undofile
setglobal scrolloff=8

" }}}

" Global remaps ---- {{{

" Command mode remaps ---- {{{
cabbrev vb vert sb
cabbrev sh !
cnoremap : <up>
cnoremap ; <down>
" }}}

" Insert mode remaps ---- {{{
inoremap <s-cr> <Esc>o
inoremap jj <ESC>
" }}}

" Normal mode remaps ---- {{{
nnoremap <down> :resize -2<cr>
nnoremap <left> :vertical resize -2<cr>
nnoremap <right> :vertical resize +2<cr>
nnoremap <silent> <leader>h :nohlsearch<cr>
nnoremap <up> :resize +2<cr>
nnoremap X "_dd
nnoremap Y y$
nnoremap <leader>y "+y
nnoremap <leader>Y "+y$
nnoremap gp `[v`]
nnoremap gP P`[v`]
nnoremap j gj
nnoremap k gk
nnoremap x "_x
" }}}

" Visual remaps remaps ---- {{{

vnoremap p "_dP
vnoremap x "_d
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
vnoremap <leader>y "+y
vnoremap > >gv
vnoremap < <gv

" }}}

" Terminal mode mappings ---- {{{
if has('nvim')
    tnoremap <Esc> <C-\><C-n>
elseif v:version > 800
    tnoremap <Esc> <C-w>N
endif
" }}}

" }}}

" Global remaps using leader ----{{{

nnoremap <leader><leader> <C-^>
nnoremap <leader>t :!
nnoremap <leader>n :Explore!<CR>
nnoremap <leader>w <C-w>

" }}}

" Tab Management ----- {{{

set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" }}}

" Statusline ==== {{{

set laststatus=2

" }}}

" Functions ==== {{{

function! GetModMarker()
    if &modifiable
        return &mod?s:modstr:s:umodstr
    else
        return ""
endfunction

function! SetStatusLine()
    set statusline=
    setlocal statusline+=\ [%n]%<
    " check if current file is child of cwd
    if expand("%:p") =~ getcwd() || &filetype ==# ""
        setlocal statusline+=%#StatusLineTermNC#
        setlocal statusline+=\ %{getcwd()}/
        setlocal statusline+=%*
        setlocal statusline+=%f
        " otherwise just give the full path, underlined
    else
        setlocal statusline+=%#Underlined#
        setlocal statusline+=\ %{expand('%:p')}
        setlocal statusline+=%*
    endif
    setlocal statusline+=%=
    setlocal statusline+=\ %y
    setlocal statusline+=\ %{GetModMarker()}
    setlocal statusline+=\ (%{strftime('%H:%M')})
    setlocal statusline+=\ 0x%02B
    setlocal statusline+=%#DiffChange#
    setlocal statusline+=\ %3p%%\ [%l:%v/%L]
endfunction

" }}}

" Commands ----- {{{

command! CD execute "cd " . expand("%:p:h")

" }}}

" Autocommands ---- {{{
if has('autocmd')
    augroup myvimrc
        autocmd!
        " Source vimrc on save
        autocmd bufwritepost vimrc source %:p
        " Reset statusline when switching buffers or working directory
        autocmd BufEnter * call SetStatusLine()
        if exists('##DirChanged')
            autocmd DirChanged * call SetStatusLine()
        endif
        "set filetype-specific modifications
        autocmd Filetype python setlocal foldmethod=indent
        autocmd FileType make setlocal list tabstop=8 shiftwidth=8 softtabstop=0 noexpandtab
        autocmd FileType plaintex setlocal ft=tex
        autocmd FileType text,markdown setlocal formatoptions=taln1
        "set cursorline local to window
        autocmd BufWInEnter,WinEnter * setlocal cursorline
        autocmd WinLeave * setlocal nocursorline
    augroup END
endif
" }}}
